(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{239:function(e,t,b){"use strict";b.r(t),b.d(t,"frontMatter",(function(){return r})),b.d(t,"metadata",(function(){return c})),b.d(t,"rightToc",(function(){return i})),b.d(t,"default",(function(){return u}));var n=b(2),a=b(9),l=(b(0),b(530)),r={id:"command_manual-[EN]",title:"Command Manual-[EN]",date:new Date("2020-04-08T00:00:00.000Z")},c={id:"Product/S2E-Module/WIZ750SR/command_manual-[EN]",title:"Command Manual-[EN]",description:"## Content",source:"@site/docs/Product/S2E-Module/WIZ750SR/Command_Manual-[EN].md",permalink:"/document_framework/docs/Product/S2E-Module/WIZ750SR/command_manual-[EN]",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/Product/S2E-Module/WIZ750SR/Command_Manual-[EN].md",sidebar:"someSidebar",previous:{title:"Command Manual-[KO]",permalink:"/document_framework/docs/Product/S2E-Module/WIZ750SR/command_manual-[KO]"},next:{title:"Trouble Shooting-[KO]",permalink:"/document_framework/docs/Product/S2E-Module/WIZ750SR/trouble_shooting-[KO]"}},i=[{value:"Content",id:"content",children:[]},{value:"WIZ750SR Command Overview",id:"wiz750sr-command-overview",children:[{value:"Abbreviations",id:"abbreviations",children:[]},{value:"Entering Serial Command Mode",id:"entering-serial-command-mode",children:[]},{value:"Command over Ethernet",id:"command-over-ethernet",children:[]}]},{value:"Command list",id:"command-list",children:[{value:"Basic Commands",id:"basic-commands",children:[]},{value:"Extended Commands",id:"extended-commands",children:[]}]},{value:"Command Descriptions",id:"command-descriptions",children:[{value:"Device Information",id:"device-information",children:[]},{value:"Network Settings",id:"network-settings",children:[]},{value:"Data UART Settings",id:"data-uart-settings",children:[]},{value:"Serial Data Packing Options",id:"serial-data-packing-options",children:[]},{value:"Command Mode Switch Settings",id:"command-mode-switch-settings",children:[]},{value:"Device Control",id:"device-control",children:[]},{value:"User I/O Settings",id:"user-io-settings",children:[]},{value:"User I/O Status / Value",id:"user-io-status--value",children:[]},{value:"Status I/O",id:"status-io",children:[]}]},{value:"Navigation",id:"navigation",children:[]}],O={rightToc:i};function u(e){var t=e.components,b=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},O,b,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"content"},"Content"),Object(l.b)("h1",{id:"wiz750sr-command-manual"},"WIZ750SR Command Manual"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Supported Languages"),"  "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"Command_Manual-%5BEN%5D.md"}),"English")," (current page)  "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"Command_Manual-%5BKO%5D.md"}),"Korean"))),Object(l.b)("p",null,Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"/document_framework/img/products/wiz750sr/docs_icon.png",alt:null}))),Object(l.b)("hr",null),Object(l.b)("h2",{id:"wiz750sr-command-overview"},"WIZ750SR Command Overview"),Object(l.b)("p",null,"WIZ750SR provides various commands for the product\u2019s setting and\ncontrol. Each command is composed of a ",Object(l.b)("strong",{parentName:"p"},"2 byte alphabet character\nstrings")," and all ",Object(l.b)("strong",{parentName:"p"},"capital letters"),". By using these commands users can\nadd script to the serial device or main MCU for product settings, and\nalso can create a program","[","1","]"," for controlling the WIZ750SR module via\nnetwork."),Object(l.b)("p",null,"Each command can operate read/write depending on the parameter, and\nthere is also a ",Object(l.b)("strong",{parentName:"p"},"read only command"),"[","2","]","."),Object(l.b)("p",null,"Entering the command and switching the command mode of the serial port\ndevice is done using the ",Object(l.b)("strong",{parentName:"p"},"data UART")," port. The ",Object(l.b)("strong",{parentName:"p"},"debug UART")," port is\nnot supported for command entering or operation."),Object(l.b)("p",null,"Identical 2-byte character strings is used for setting the product with\ncommands via serial and Ethernet network, but there will a distinction\nof the sending frame form. Thus this document will cover explanations of\nall commands and guides for each sending methods and its form of frames."),Object(l.b)("p",null,"The different command modes are as following."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#entering_serial_command_mode"}),"Control device using serial command\nmode")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#command_over_ethernet"}),"Control device using Ethernet network")))),Object(l.b)("h3",{id:"abbreviations"},"Abbreviations"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"CR"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Carriage Return, moves the cursor to the far left(starting) position ('","\\","r', 0x0D)"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"LF"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Line Feed, moves the cursor to the new line below ('","\\","n', 0x0A)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of commands")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"RW"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Read / Write")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"RO"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Read only")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"WO"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Write only")))),Object(l.b)("hr",null),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"The ",Object(l.b)("strong",{parentName:"p"},"Configuration tool")," provided by WIZnet uses the identical\ncommand set to control WIZ750SR.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"For example, when the ",Object(l.b)("strong",{parentName:"p"},"MC")," command for checking the MAC address\nand the ",Object(l.b)("strong",{parentName:"p"},"VR")," command for checking the firmware are identical."),Object(l.b)("h2",Object(n.a)({parentName:"li"},{id:"usage-of-command-set"}),"Usage of Command Set"))),Object(l.b)("h3",{id:"entering-serial-command-mode"},"Entering Serial Command Mode"),Object(l.b)("p",null,"You can use either of the two methods below to enter serial command\nmode."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"1. Enter command mode using hardware trigger pin"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Use the HW","_","TRIG pin of the WIZ750SR (For the EVB, HW","_","TRIG\nswitch) to enter command mode."),Object(l.b)("li",{parentName:"ul"},"Upon turning the power on, check the pin to enter command mode.\nUse the trigger pin to re-enter the command mode when rebooting."),Object(l.b)("li",{parentName:"ul"},"The trigger pin should be pull-up, and operates as low active."),Object(l.b)("li",{parentName:"ul"},"This method is used when users wish to change settings while the\nproduct operation is initiated.")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Set the hardware trigger pin(HW_TRIG) to Low. "),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"When using the EVB, place the HW_TRIG switch to Command."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Power on the WIZ750SR."),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"When operating in serial command mode, users can check the following message via Debug UART port."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("code",null,"> SEG:AT Mode ")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Enter the Command and Parameter that needs setting via serial port"),"((Data UART port))."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Switch to data transmission mode(GW mode) using [","[#ex|EX]","] command"),".",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If the switch to data transmission mode is successful, users can check the following message via Debug UART port."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("code",null,"> SEG:GW Mode "))))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"2. Enter command mode using command mode switch code"),"[","1","]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Users can enter command mode using the command mode switch code\nprovided by WIZ750SR."),Object(l.b)("li",{parentName:"ul"},"The command mode switch codes can be used only if it is enabled\nin the configuration tool. (",Object(l.b)("strong",{parentName:"li"},"default: Enabled"),")"),Object(l.b)("li",{parentName:"ul"},"The command mode switch code is composed of 3-byte Hex codes,\nand can be changed to a different value if needed. The code only\naccepts Hex value. (",Object(l.b)("strong",{parentName:"li"},"default: Hex ","[","2B","]","[","2B","]","[","2B"),"]","[","2","]",")")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Check if 'Serial command mode switch code' is enabled at the configuration tool and the 3-bytes 'command mode switch code'.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Enter the \u2018command mode switch code\u2019 via data UART port to change modes."),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Read below what you need to be cautious about when switching to command mode."),Object(l.b)("li",{parentName:"ul"},"When operating in serial command mode, users can check the following message via Debug UART port."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("code",null,"> SEG:AT Mode ")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Enter the Command and Parameter that needs setting via serial port.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Use [","[#ex|EX]","] command to switch to data transmission mode."),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"When operating in data transmission mode, users can check the following message via Debug UART port."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("code",null,"> SEG:GW Mode "))))),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Command mode switch trigger code via Data UART port")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Char '+++'"))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Please be cautious when using the trigger code to switch command\nmode.")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"There has to be a time gap of ",Object(l.b)("strong",{parentName:"li"},"at least 500ms")," at the start and end of the \u2018command mode switch code\u2019 in order it to be read as switch code."),Object(l.b)("li",{parentName:"ul"},"The entering time in between each byte of the \u20183-byte command mode switch code\u2019 has to be ",Object(l.b)("strong",{parentName:"li"},"below 500ms"),"."),Object(l.b)("li",{parentName:"ul"},"Do not add CR or LF at the end of the command mode switch code((Conversely, the serial command after mode switch must end with CR or LF.))."),Object(l.b)("li",{parentName:"ul"},"The default values of 1 and 2 above are ",Object(l.b)("strong",{parentName:"li"},"500ms"),"; these values change to the timer value if the timer value of the serial data packing option is set to a certain value.")),Object(l.b)("h4",{id:"serial-command-frame-format"},"Serial Command Frame Format"),Object(l.b)("p",null,"You must include CR and LF at the end of each command. CR and LF must be\nincluded at the end of each commands when multiple commands are entered\nsimultaneously."),Object(l.b)("h5",{id:"get-request"},"Get Request"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"[2-bytes Command Code] [CR] [LF]\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Enter command without parameter."),Object(l.b)("li",{parentName:"ul"},"The response relevant to the command will return.")),Object(l.b)("h5",{id:"set-request"},"Set Request"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"[2-bytes Command Code] [Parameters] [CR] [LF]\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Enter the command and parameters you wish to set."),Object(l.b)("li",{parentName:"ul"},"There will be no particular response and the field value relevant to\nthe command will change instantly."),Object(l.b)("li",{parentName:"ul"},"You have to use the ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#sv"}),"SV"))," command in order to save settings,\nand use the ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#rt"}),"RT"))," command to change IP allocation methods or\nother initial operation changes.")),Object(l.b)("p",null,"*"," Note: You can check the Echoback of UART command via ",Object(l.b)("strong",{parentName:"p"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#ec"}),"EC")),"\ncommand."),Object(l.b)("hr",null),Object(l.b)("h3",{id:"command-over-ethernet"},"Command over Ethernet"),Object(l.b)("p",null,"Users can control or monitor WIZ750SR via Ethernet by using the\nfollowing commands. The user must use ",Object(l.b)("strong",{parentName:"p"},"UDP")," or ",Object(l.b)("strong",{parentName:"p"},"TCP client")," ","[","1","]"," to\nsend commands, and the port number for processing the commands is\n",Object(l.b)("strong",{parentName:"p"},"50001"),"."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Network information for\ncommand transmission:"),Object(l.b)("br",{parentName:"p"}),"\n",Object(l.b)("strong",{parentName:"p"},"UDP / TCP Server : 50001"),Object(l.b)("br",{parentName:"p"}),"\n","(User can send the commands by UDP / TCP Client to device) "),Object(l.b)("h4",{id:"ethernet-command-frame-format"},"Ethernet Command Frame Format"),Object(l.b)("p",null,"Two additional commands are required before sending the command code\nwhen controlling the WIZ750SR via Ethernet. All other settings and\noperations are the same as when sending the serial command code via data\nUART port."),Object(l.b)("p",null,"The two additional commands are ",Object(l.b)("strong",{parentName:"p"},"MA")," and ",Object(l.b)("strong",{parentName:"p"},"PW"),"."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"[","MA","]"," command"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"This field shows the ",Object(l.b)("strong",{parentName:"li"},"product\u2019s MAC address"),"."),Object(l.b)("li",{parentName:"ul"},"In both cases of TCP and UDP, 6-byte MAC address must be\nincluded after the 2-byte MA command.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"When users wish to broadcast only Get Request via UDP","[","2","]",",\nthe relevant field value can be set as the Broadcast MAC\naddress","[","3","]",". Users can receive responses from multiple\npeers. The search function of the configuration tool is\nimplemented like this")))))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"[","PW","]"," command"))),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Users must use UDP or TCP client because the UDP or TCP server is\noperating to handle the device commands.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Data is sent to the broadcast IP address 255.255.255.255, and data\ncan be sent to all peers in the same network.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"FF:FF:FF:FF:FF:FF"))),Object(l.b)("h5",{id:"get-request-1"},"Get Request"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"When sending a single command")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MA [MAC] [CR] [LF] PW [Search ID] [CR] [LF] [Command] [CR] [LF]\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"When sending multiple commands")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MA [MAC] [CR] [LF] PW [Search ID] [CR] [LF] ([Command] [CR] [LF]) * Number of commands\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The response for \u2018get request\u2019 will have the identical format as\n\u2018request\u2019 but include the parameter","[","1","]",".")),Object(l.b)("h5",{id:"set-request-1"},"Set Request"),Object(l.b)("p",null," ",Object(l.b)("strong",{parentName:"p"},"When sending a single command")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MA [MAC] [CR] [LF] PW [Search ID] [CR] [LF] [Command] [Parameters] [CR] [LF]\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"When sending multiple commands")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MA [MAC] [CR] [LF] PW [Search ID] [CR] [LF] ([Command] [Parameters] [CR] [LF]) * Number of commands\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"For \u2018Set Request\u2019, there is no additional response needed for\nchanging the product setting."),Object(l.b)("li",{parentName:"ul"},"If users want to check the modified setting, send the command\nwithout parameter at the end of the \u2018Set Request frame\u2019; in form of\nSet + Get Request.")),Object(l.b)("h4",{id:"ethernet-command-examples"},"Ethernet Command Examples"),Object(l.b)("h5",{id:"example-1-udp-get-command-frame"},"Example ","#","1: UDP Get Command Frame"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"When requesting MAC and local IP from multiple devices via UDP",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Search ID is not used")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Request from User"))),Object(l.b)("tbody",{parentName:"table"})),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MA [FF FF FF FF FF FF] [CR] [LF] PW [ ] [CR] [LF] MC [CR] [LF] LI [CR] [LF] \n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Hex code version of Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"4D 41 FF FF FF FF FF FF 0D 0A 50 57 20 0D 0A 4D 43 0D 0A 4C 49 0D 0A\n")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Response by WIZ750SR"))),Object(l.b)("tbody",{parentName:"table"})),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"The response for \u2018Get Request\u2019 has the same form as \u2018Set Request\u2019.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MA [00 08 DC 00 00 11] [CR] [LF] PW [ ] [CR] [LF] MC [00 08 DC 00 00 11] [CR] [LF] LI [192.168.11.2] [CR] [LF] \n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Hex code version of Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"4D 41 00 08 DC 00 00 11 0D 0A 50 57 20 0D 0A 4D 43 00 08 DC 00 00 11 0D 0A 4C 49 31 39 32 2E 31 36 38 2E 31 31 2E 32 0D 0A\n")),Object(l.b)("p",null,"\\</WRAP",">"),Object(l.b)("h5",{id:"example-2-tcp-get-command-frame"},"Example ","#","2: TCP Get Command Frame"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"When requesting the local IP of the device, which MAC address is\n00:08:DC:00:00:11, via TCP",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Search ID is not used")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Request from User"))),Object(l.b)("tbody",{parentName:"table"})),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MA [00 08 DC 00 00 11] [CR] [LF] PW [ ] [CR] [LF] LI [CR] [LF] \n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Hex code version of Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"4D 41 00 08 DC 00 00 11 0D 0A 50 57 20 0D 0A 4C 49 0D 0A\n")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Response by WIZ750SR"))),Object(l.b)("tbody",{parentName:"table"})),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MA [00 08 DC 00 00 11] [CR] [LF] PW [ ] [CR] [LF] LI [192.168.11.2] [CR] [LF] \n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Hex code version of Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"4D 41 00 08 DC 00 00 11 0D 0A 50 57 20 0D 0A 4C 49 31 39 32 2E 31 36 38 2E 31 31 2E 32 0D 0A\n")),Object(l.b)("h5",{id:"example-3-tcp-set-command-frame"},"Example ","#","3: TCP Set Command Frame"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"When requesting the local IP of the device, which MAC address is\n00:08:DC:00:00:11, via TCP",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If the Search ID is set to HELLO"),Object(l.b)("li",{parentName:"ul"},"Or if user wishes to change the local IP to 192.168.11.5")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Request from User"))),Object(l.b)("tbody",{parentName:"table"})),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MA [00 08 DC 00 00 11] [CR] [LF] PW [HELLO] [CR] [LF] LI [192.168.11.5] [CR] [LF] \n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Hex code version of Command Frame")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"4D 41 00 08 DC 00 00 11 0D 0A 50 57 48 45 4C 4C 4F 0D 0A 4C 49 31 39 32 2E 31 36 38 2E 31 31 2E 35 0D 0A\n")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Response by WIZ750SR"))),Object(l.b)("tbody",{parentName:"table"})),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"None\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"When modifying the IP\naddress format","[","1","]",", '.'(dot, 0x2E) must be included such as the\n'192.168.11.5'.")," "),Object(l.b)("hr",null),Object(l.b)("h2",{id:"command-list"},"Command list"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The Set command setting the applicable value will operate if the\nparameter is included when entering the command."),Object(l.b)("li",{parentName:"ul"},"The Get command reading the applicable value will operate if only\nthe command is entered."),Object(l.b)("li",{parentName:"ul"},"If the \u2018Read only\u2019 sign does not appear, it means the command\nsupports both Get / Set. "),Object(l.b)("li",{parentName:"ul"},"Write only command is for controlling the product without the\nparameter","[","2","]","."),Object(l.b)("li",{parentName:"ul"},"There is a basic command list","[","3","]"," and an expanded command\nlist","[","4","]","."),Object(l.b)("li",{parentName:"ul"},"Settings like IP allocation settings or DNS operation settings via\ncommand mode","[","5","]"," require \u2018module reboot\u2019 via ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#rt"}),"RT"))," command\nafter the settings are saved via ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#sv"}),"SV"))," command.")),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"IPv4 address forms like IP address, Gateway address, subnet mask,\nDNS server address, or Remote IP address.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Save setting, reboot, switch mode, factory reset and Etc.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"WIZ107/108SR sync command list, excluding ","[","UI","]"," command")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"WIZ750SR exclusive command list")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"When the remote peer address is changed from IP address to domain"))),Object(l.b)("h3",{id:"basic-commands"},"Basic Commands"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"CMD"),Object(l.b)("th",null,"Category"),Object(l.b)("th",null,"Description"),Object(l.b)("th",null,"Type"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#mc"},"MC")),Object(l.b)("td",null,"Device Information"),Object(l.b)("td",null,"MAC address"),Object(l.b)("td",null,"RO")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#vr"},"VR")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Firmware version"),Object(l.b)("td",null,"RO")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#mn"},"MN")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Product name"),Object(l.b)("td",null,"RO")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#st"},"ST")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Operation status"),Object(l.b)("td",null,"RO")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#un"},"UN")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"UART interface(Str)"),Object(l.b)("td",null,"RO")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#un"},"UI")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"UART interface(Code)"),Object(l.b)("td",null,"RO")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#op"},"OP")),Object(l.b)("td",null,"Network Settings"),Object(l.b)("td",null,"Network operation mode"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#im"},"IM")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"IP address allocation method",Object(l.b)("br",null),"(Static/DHCP)"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#li"},"LI")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Local IP address"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#sm"},"SM")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Subnet mask"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#gw"},"GW")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Gateway address"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ds"},"DS")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"DNS server address"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#lp"},"LP")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Local port number"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#rh"},"RH")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Remote host IP address / Domain"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#rp"},"RP")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Remote host port number"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#br"},"BR")),Object(l.b)("td",null,"Data UART Settings"),Object(l.b)("td",null,"UART Baud rate"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#db"},"DB")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"UART Data bit"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#pr"},"PR")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"UART Parity bit"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#sb"},"SB")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"UART Stop bit"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#fl"},"FL")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"UART Flow control"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#pt"},"PT")),Object(l.b)("td",null,"Serial Data Packing Options"),Object(l.b)("td",null,"Time delimiter"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ps"},"PS")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Size delimiter"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#pd"},"PD")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Char delimiter"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#it"},"IT")),Object(l.b)("td",null,"Options"),Object(l.b)("td",null,"Inactivity timer value"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#cp"},"CP")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Connection password enable",Object(l.b)("br",null),"(TCP server only)"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#np"},"NP")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Connection password",Object(l.b)("br",null),"(TCP server only)"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#sp"},"SP")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Search ID code"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#dg"},"DG")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Serial debug message enable"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ka"},"KA")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"TCP Keep-alive enable"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ki"},"KI")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"TCP Keep-alive initial interval"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ke"},"KE")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"TCP Keep-alive retry interval"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ri"},"RI")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"TCP Reconnection interval",Object(l.b)("br",null),"(TCP client only)"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ec"},"EC")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"UART Echoback enable"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#te"},"TE")),Object(l.b)("td",null,"Command Mode Switch Settings"),Object(l.b)("td",null,"Command mode switch code enable"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ss"},"SS")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Command mode switch code",Object(l.b)("br",null),"(3-bytes Hex)"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ex"},"EX")),Object(l.b)("td",null,"Device Control"),Object(l.b)("td",null,"Command mode exit",Object(l.b)("br",null),"(switch to data transfer mode)"),Object(l.b)("td",null,"WO")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#sv"},"SV")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Save device setting"),Object(l.b)("td",null,"WO")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#rt"},"RT")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Device reboot"),Object(l.b)("td",null,"WO")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#fr"},"FR")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Device factory reset"),Object(l.b)("td",null,"WO")))),Object(l.b)("h3",{id:"extended-commands"},"Extended Commands"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"CMD"),Object(l.b)("th",null,"Category"),Object(l.b)("th",null,"Description"),Object(l.b)("th",null,"Type"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ca_-_cd"},"CA")),Object(l.b)("td",null,"User I/O Settings"),Object(l.b)("td",null,"User I/O pin A type & direction"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ca_-_cd"},"CB")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"User I/O pin B type & direction"),Object(l.b)("td",null,":::")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ca_-_cd"},"CC")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"User I/O pin C type & direction"),Object(l.b)("td",null,":::")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ca_-_cd"},"CD")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"User I/O pin D type & direction"),Object(l.b)("td",null,":::")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ga_-_gd"},"GA")),Object(l.b)("td",null,"User I/O",Object(l.b)("br",null),"Status / Value"),Object(l.b)("td",null,"User I/O pin A status or value"),Object(l.b)("td",null,"Digital out: RW",Object(l.b)("br",null),"Digital in: RO",Object(l.b)("br",null),"Analog in: RO")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ga_-_gd"},"GB")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"User I/O pin B status or value"),Object(l.b)("td",null,":::")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ga_-_gd"},"GC")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"User I/O pin C status or value"),Object(l.b)("td",null,":::")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#ga_-_gd"},"GD")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"User I/O pin D status or value"),Object(l.b)("td",null,":::")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#sc"},"SC")),Object(l.b)("td",null,"Status I/O"),Object(l.b)("td",null,"Status pin S0 & S1 operation mode setting"),Object(l.b)("td",null,"RW")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,Object(l.b)("a",{href:"#s0"},"S0")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Status of pin S0 (PHY link or DTR)"),Object(l.b)("td",null,"RO")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,Object(l.b)("a",{href:"#s1"},"S1")),Object(l.b)("td",null,":::"),Object(l.b)("td",null,"Status of pin S1 (TCP connect or DSR)"),Object(l.b)("td",null,":::")))),Object(l.b)("hr",null),Object(l.b)("h2",{id:"command-descriptions"},"Command Descriptions"),Object(l.b)("h3",{id:"device-information"},"Device Information"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"mc"},"MC"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"MC[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Check product\u2019s MAC address"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read only"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Type:")," String"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MAC address with colons(:)\n")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"MC00:08:DC:00:00:01\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"vr"},"VR"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"VR[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Check the product\u2019s firmware version"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read only"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Type:")," String"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Firmware version with dots(.)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\\=",">"," Major version number . Minor version number . Maintenance\nversion number")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"VR1.0.0\\r\\n"))))),Object(l.b)("hr",null),Object(l.b)("h4",{id:"mn"},"MN"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"MN[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Check the product name"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read only"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Type:")," String"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Value:"))),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Device model name\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\\=",">"," Default: WIZ750SR")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"MNWIZ750SR\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"st"},"ST"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"ST[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Check the product operation status"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read only"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Type:")," String"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Value:"))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Status"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"BOOT"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boot mode; Users can update the product setting and firmware.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"OPEN"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Status before TCP connection is successful.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"CONNECT"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Status after TCP connection is successful.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"UPGRADE"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Status during firmware update or DHCP IP allocation.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ATMODE"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Serial AT command mode status.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"UDP"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"UDP mode status.")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"STATMODE\\r\\n"))))),Object(l.b)("hr",null),Object(l.b)("h4",{id:"un"},"UN"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"UN[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Check product\u2019s UART Interface"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read only"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Type:")," String"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Value:"))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"UART Interface"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"RS-232/TTL"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Device supports UART input/output of RS-232C or TTL signals.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"RS-422/485"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Device supports UART input/output of RS-422 and RS-485 signals.")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"UNRS-232/TTL\\r\\n"))))),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ui"},"UI"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"UI[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Check product\u2019s UART Interface"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read only"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Type:")," Number (0 / 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return value"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Remarks"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Device supports UART input/output of RS-232C or TTL signals."),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"RS-232/TTL")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Device supports UART input/output of RS-422 and RS-485 signals."),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"RS-422/485")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"UI0\\r\\n"))))),Object(l.b)("h3",{id:"network-settings"},"Network Settings"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"op"},"OP"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"OP<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Product\u2019s network operation mode"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 3)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Meaning"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"TCP Client mode"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"TCP Server mode"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"2"),Object(l.b)("td",null,"TCP Mixed mode"),Object(l.b)("td",null,"TCP Server / Client mixed mode")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"3"),Object(l.b)("td",null,"UDP mode"),Object(l.b)("td",null,"-")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"OP0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change the network operation mode")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"im"},"IM"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"IM<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Product\u2019s IP address allocation method"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Meaning"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"Static IP"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"DHCP"),Object(l.b)("td",null,"Obtain an IP address automatically")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"IM0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change product\u2019s IP address allocation method")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"li"},"LI"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"LI<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Product's IP address"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," String of IPv4 address form (including\ndot)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Ex> 192.168.11.2\n")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"LI192.168.11.2\\r\\n")),Object(l.b)("li",{parentName:"ul"},"In HEX: ",Object(l.b)("inlineCode",{parentName:"li"},"4C 49 31 39 32 2E 31 36 38 2E 31 31 2E 32 0D 0A"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change product\u2019s IP address")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"sm"},"SM"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"SM<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Product\u2019s subnet mask"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," String of IPv4 address form (including\ndot)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Ex> 255.255.255.0\n")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("p",null,"*"," ",Object(l.b)("strong",{parentName:"p"},"Response")," \\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">","\n\\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"SM255.255.255.0\\r\\n")),Object(l.b)("li",{parentName:"ul"},"In HEX: ",Object(l.b)("inlineCode",{parentName:"li"},"53 4D 32 35 35 2E 32 35 35 2E 32 35 35 2E 30 0D 0A"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"o Change product\u2019s subnet mask")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"gw"},"GW"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"GW<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Product\u2019s gateway address"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," String of IPv4 address form (including\ndot)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Ex> 192.168.11.1\n")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"GW192.168.11.1\\r\\n")),Object(l.b)("li",{parentName:"ul"},"In HEX: ",Object(l.b)("inlineCode",{parentName:"li"},"47 57 31 39 32 2E 31 36 38 2E 31 31 2E 31 0D 0A"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change product\u2019s gateway address")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ds"},"DS"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"DS<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Product\u2019s DNS address"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," String of IPv4 address form (including\ndot)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Ex> 8.8.8.8\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Google Public DNS (IPv4)",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"8.8.8.8"),Object(l.b)("li",{parentName:"ul"},"8.8.4.4")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"DS8.8.8.8\\r\\n")),Object(l.b)("li",{parentName:"ul"},"In HEX: ",Object(l.b)("inlineCode",{parentName:"li"},"44 53 38 2E 38 2E 38 2E 38 0D 0A"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change Product\u2019s DNS")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"lp"},"LP"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"LP<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Product\u2019s port number"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 65535)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Ex> 5000\n")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"LP5000\\r\\n")),Object(l.b)("li",{parentName:"ul"},"In HEX: ",Object(l.b)("inlineCode",{parentName:"li"},"4C 50 35 30 30 30 0D 0A"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change product\u2019s port number")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"rh"},"RH"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"RH<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Product\u2019s remote host IP address / Domain name"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," String of IPv4 address form (including\ndot) or Domain string"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Ex> 192.168.11.3\n")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"RH192.168.11.3\\r\\n")),Object(l.b)("li",{parentName:"ul"},"In HEX: ",Object(l.b)("inlineCode",{parentName:"li"},"52 48 31 39 32 2E 31 36 38 2E 31 31 2E 33 0D 0A"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change product\u2019s remote host IP address")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"rp"},"RP"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"RP<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Product\u2019s remote host port number"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 65535)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Ex> 5000\n")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"RP5000\\r\\n")),Object(l.b)("li",{parentName:"ul"},"In HEX: ",Object(l.b)("inlineCode",{parentName:"li"},"52 50 35 30 30 30 0D 0A"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change product\u2019s remote host port number")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("h3",{id:"data-uart-settings"},"Data UART Settings"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"br"},"BR"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"BR<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Baud rate of serial interface (Data UART)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 13)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Baud rate"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"300"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"600"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"2"),Object(l.b)("td",null,"1200"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"3"),Object(l.b)("td",null,"1800"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"4"),Object(l.b)("td",null,"2400"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"5"),Object(l.b)("td",null,"4800"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"6"),Object(l.b)("td",null,"9600"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"7"),Object(l.b)("td",null,"14400"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"8"),Object(l.b)("td",null,"19200"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"9"),Object(l.b)("td",null,"28800"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"10"),Object(l.b)("td",null,"38400"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"11"),Object(l.b)("td",null,"57600"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"12"),Object(l.b)("td",null,"115200"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"13"),Object(l.b)("td",null,"230400"),Object(l.b)("td",null,"-")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"BR12\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change baud rate of serial interface")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"db"},"DB"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"DB<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Data bit of serial interface (Data UART)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Data bit"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"7-bit"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"8-bit"),Object(l.b)("td",null,"-")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"DB1\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change data bit of serial interface")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"pr"},"PR"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"PR<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Parity bit of serial interface (Data UART)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 2)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Parity bit"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"NONE"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"ODD"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"2"),Object(l.b)("td",null,"EVEN"),Object(l.b)("td",null,"-")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"PR0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change parity bit of serial interface")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"sb"},"SB"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"SB<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Stop bit of serial interface (Data UART)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Stop bit"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"1-bit"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"2-bit"),Object(l.b)("td",null,"-")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"SB0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change stop bit of serial interface")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"fl"},"FL"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"FL<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Flow control of serial interface (Data UART) /\n(RS-232/TTL interface only)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 2)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Flow control"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"NONE"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"XON/XOFF"),Object(l.b)("td",null,"Software flow control")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"2"),Object(l.b)("td",null,"RTS/CTS"),Object(l.b)("td",null,"Hardware flow control")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"FL0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change flow control of serial interface")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("h3",{id:"serial-data-packing-options"},"Serial Data Packing Options"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"pt"},"PT"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"PT<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Data packing of serial interface (Data UART) \u2013 Time\ndelimiter","[","1","]"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 65535)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used / 1 ~ 65535: Data packing time (Unit: millisecond)\n")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"PT0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"None"),Object(l.b)("li",{parentName:"ul"},"Change the time delimiter value of serial data packing")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ps"},"PS"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"PS<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Data packing of serial interface (Data UART) \u2013 Data\nsize delimiter","[","2","]"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 255)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used / 1 ~ 255: Data packing size (Unit: byte)\n")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"The received serial data is collected until the designated time is\nlapsed and will be sent all together via Ethernet. This time starts\ncounting when receiving the serial data stop, and if additional\nserial data is received before the designated time is lapsed, the\ncount restarts.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"The received serial data is collected until the designated data\nlength is reached and will be sent all together via Ethernet."),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"PS0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"None"),Object(l.b)("li",{parentName:"ul"},"Change the data size of serial data packing")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"pd"},"PD"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"PD<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Data packing of serial interface (Data UART) -\ndesignated character delimiter","[","1","]"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," 1-byte Character (Hex only)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"00: Not used / Other: Designated character\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The designated character is not included in data.")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"PD00\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"None"),Object(l.b)("li",{parentName:"ul"},"Change designated character delimiter of serial data packing")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"The received serial data is collected until the designated character\nis received and will be sent all together via Ethernet."),Object(l.b)("h3",Object(n.a)({parentName:"li"},{id:"options"}),"Options"))),Object(l.b)("hr",null),Object(l.b)("h4",{id:"it"},"IT"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"IT<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Inactivity timer value for TCP connection close when\nthere is no data exchange"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 65535)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used / 1 ~ 65535: Inactivity timer value (Unit: second)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"If the timer is active, the TCP connection closes when there is no\ndata exchange."),Object(l.b)("li",{parentName:"ul"},"The timer restarts when there is an Ethernet data exchange before\nreaching entered inactivity timer value.")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"IT0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"o Change inactivity timer value")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"cp"},"CP"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"CP<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," TCP connection password enable (TCP server mode only)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 / 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used(Disabled) / 1: Used(Enabled)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"This option is only when the product is operating as ",Object(l.b)("strong",{parentName:"li"},"TCP server"),"."),Object(l.b)("li",{parentName:"ul"},"If this option is active, the TCP client wishing to connect to the\ndevice must send first the TCP connection password and confirmation\nfor actual data to be transmitted. ")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"CP0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change whether TCP connection password enabled or not.")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"np"},"NP"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"NP<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," TCP connection password (TCP server mode only)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," String (up to 8-bytes)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Default: None(Null)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"This option is applicable only when product is operating as ",Object(l.b)("strong",{parentName:"li"},"TCP\nserver"),"."),Object(l.b)("li",{parentName:"ul"},"The password can be maximum of 8 characters.")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"NP\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change TCP connection password")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"sp"},"SP"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"SP<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Search identification code"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," String (up to 8-bytes)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Default: None(Null)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"If this option is active, only the products with matching ID are\nfound via product search by configuration tool."),Object(l.b)("li",{parentName:"ul"},"Search ID code can be maximum of 8 characters.")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"SP\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change search ID code")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"dg"},"DG"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"DG<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Serial debug message enable (Debug UART port)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 / 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used(Disabled) / 1: Used(Enabled)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"If this option is active, the product setting or error message will\noutput via Debug UART port. ")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"DG1\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change whether serial debug message enabled or not.")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ka"},"KA"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"KA<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Keep-alive packet transmit enable for checking TCP\nconnection established"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 / 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used(Disabled) / 1: Used(Enabled)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"If this option is active, the keep-alive packet is sent to the TCP\nconnection peer according to the designated interval(",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#ki"}),"KI")," /\n",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#ke"}),"KE"),")."),Object(l.b)("li",{parentName:"ul"},"If there is no response from the peer, the TCP connection will close\nand the socket will initialize (socket open).")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"KA1\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change whether keep-alive packet transmit enabled or not.")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ki"},"KI"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"KI<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Initial TCP keep-alive packet transmission interval\nvalue"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 65535)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used / 1 ~ 65535: Initial Keep-alive packet transmission interval (Unit: millisecond)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The keep-alive packet is sent to the TCP connection peer according\nto the designated packet transmission interval."),Object(l.b)("li",{parentName:"ul"},"Keep-alive packet transmission becomes active only when at least one\nEthernet data transmission has been made.")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"KI7000\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change initial keep-alive packet transmission interval value")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ke"},"KE"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"KE<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," TCP Keep-alive packet transmission retry interval value"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 65535)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used / 1 ~ 65535: Keep-alive packet transmission retry interval (Unit: millisecond)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"After the first keep-alive packet transmission is done, the next\nkeep-alive packet is sent to the TCP connection peer according to\nthe designated packet transmission interval."),Object(l.b)("li",{parentName:"ul"},"Keep-alive packet transmission becomes active only when at least one\nEthernet data transmission has been made.")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"KE5000\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change keep-alive packet transmission retry interval value")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ri"},"RI"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"RI<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," TCP client reconnection interval value (TCP client\nonly)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 65535)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used / 1 ~ 65535: TCP client reconnection interval (Unit: millisecond)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"If the TCP connection between the server is not successful during\nTCP client mode, the interval value between the next connection\nattempt is set. ")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"RI3000\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change TCP client reconnection interval value")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ec"},"EC"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"EC<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," UART Echoback function enable (Data UART port)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 / 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used(Disabled) / 1: Used(Enabled)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"If this option is enabled, the received serial data becomes Echoback\nvia serial port (Data UART)."),Object(l.b)("li",{parentName:"ul"},"This function can be used to check what the user enters via serial\ncommand mode.")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"EC0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change whether UART echoback function enabled or not.")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("h3",{id:"command-mode-switch-settings"},"Command Mode Switch Settings"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"te"},"TE"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"TE<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Serial command mode switch code enable"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 / 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"0: Not used(Disabled) / 1: Used(Enabled)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"This function must be active in order to enter serial command mode\nvia 3-byte command mode switch code.")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"TE1\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change weather command mode switch code enabled or not")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ss"},"SS"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"SS<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Serial command mode switch code"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," String (3-byte hex only)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Default: 0x2B 0x2B 0x2B \n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The command mode switch code must be composed of 3-byte(3\ncharacters) hex code.")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"SS2B2B2B\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change command mode switch code")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("h3",{id:"device-control"},"Device Control"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ex"},"EX"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"EX[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Command mode exit"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Write only (Control)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return:")," None"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Command mode exit and switch to data transmission mode")))),Object(l.b)("p",null,"\\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"While the serial debug message is being used, the following mode\nswitch message will output via Data/Debug UART ports once the switch\nto data transmission mode is successful."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"> SEG:GW Mode"))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"sv"},"SV"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"SV[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Save changed settings"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Write only (Control)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return:")," None"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Save changed settings")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"rt"},"RT"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"RT[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Device reboot"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Write only (Control)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return:")," None"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"All operations are closed and device reboot")))),Object(l.b)("p",null,"\\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"While the serial debug message is being used, the following message\nwill output via data UART"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"> REBOOT"))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"fr"},"FR"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"FR[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Device factory reset"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Write only (Control)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return:")," None"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Reset to device factory default setting")))),Object(l.b)("p",null,"\\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The device\u2019s default setting values can be found at ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"/products/wiz750sr/gettingstarted/ko#wiz750sr_factory_settings"}),"WIZ750SR\nFactory\nSettings"))),Object(l.b)("li",{parentName:"ul"},"The device reboots after factory reset, like ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#rt"}),"RT"))," command.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"While the serial debug message is being used, the following\nmessage will output via data UART."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"> REBOOT"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("h3",{id:"user-io-settings"},"User I/O Settings"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ca---cd"},"CA - CD"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"Cx<Parameter>[CR][LF] (CA ~ CD)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," User I/O pin setting (type / direction)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0 ","~"," 2)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"I/O Setting"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"Digital input"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"Digital output"),Object(l.b)("td",null,"-")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"2"),Object(l.b)("td",null,"Analog input"),Object(l.b)("td",null,"-")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"CA2\\r\\n")," ",Object(l.b)("inlineCode",{parentName:"li"},"CB0\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change user I/Os setting")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("h3",{id:"user-io-status--value"},"User I/O Status / Value"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"ga---gd"},"GA - GD"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"Gx<Parameter>[CR][LF] (GA ~ GD)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," User I/O pin status or value"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (Digital in/out: 0/1, Analog in:\n0 ","~"," 4095)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"I/O Setting"),Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"Digital in/out"),Object(l.b)("td",null,"0"),Object(l.b)("td",null,"Low")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,":::"),Object(l.b)("td",null,"1"),Object(l.b)("td",null,"High")),Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"Analog in"),Object(l.b)("td",null,"0 ~ 4095"),Object(l.b)("td",null,"12-bit ADC resolution")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Digital out: R/W"),Object(l.b)("li",{parentName:"ul"},"Digital in: Read only "),Object(l.b)("li",{parentName:"ul"},"Analog in: Read only")),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"GA4095\\r\\n (Analog input)")),Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"GC0\\r\\n (Digital input)"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change user I/O status - High or Low, ",Object(l.b)("strong",{parentName:"li"},"Digital output only"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("h3",{id:"status-io"},"Status I/O"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"sc"},"SC"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"SC<Parameter_0><Parameter_1>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Set status I/O pin ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#s0"}),"S0"),"(PA","_","10) and\n",Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"#s1"}),"S1"),"(PA","_","01)")," operation mode"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read / Write"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0/1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter","_","0")," (upper byte)")),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Meaning"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"PHY link status"),Object(l.b)("td",null,"Default")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"DTR"),Object(l.b)("td",null,"Data Terminal Ready",Object(l.b)("br",null),"(RS-232/TTL only)")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter","_","1")," (lower byte)")),Object(l.b)("table",null,Object(l.b)("thead",null,Object(l.b)("tr",{class:"header"},Object(l.b)("th",null,"Parameter /",Object(l.b)("br",null),"Return value"),Object(l.b)("th",null,"Meaning"),Object(l.b)("th",null,"Remarks"))),Object(l.b)("tbody",null,Object(l.b)("tr",{class:"odd"},Object(l.b)("td",null,"0"),Object(l.b)("td",null,"TCP connection status"),Object(l.b)("td",null,"Default")),Object(l.b)("tr",{class:"even"},Object(l.b)("td",null,"1"),Object(l.b)("td",null,"DSR"),Object(l.b)("td",null,"Data Set Ready",Object(l.b)("br",null),"(RS-232/TTL only)")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: (Connection Status) ",Object(l.b)("inlineCode",{parentName:"li"},"SC00\\r\\n")),Object(l.b)("li",{parentName:"ul"},"In ASCII: (DTR / DSR) ",Object(l.b)("inlineCode",{parentName:"li"},"SC11\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"With Parameter (Set)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"No response"),Object(l.b)("li",{parentName:"ul"},"Change status I/O pins operation mode")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"s0"},"S0"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"S0<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Status I/O pin ",Object(l.b)("strong",{parentName:"li"},"S0(PA","_","10)")," value"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read only"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0/1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"When operating via PHY link status pin"))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return value"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Meaning"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Remarks"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"PHY link up"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"PHY link down"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"When operating via DTR(Data Terminal Ready) pin"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Signal that the device communication is ready (RS-232, Output)"),Object(l.b)("li",{parentName:"ul"},"Connects with peer device's DSR pin")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return value"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Meaning"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Remarks"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The device is not ready"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The device ready for communications"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"S00\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h4",{id:"s1"},"S1"),Object(l.b)("hr",null),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Format:")," ",Object(l.b)("inlineCode",{parentName:"li"},"S1<Parameter>[CR][LF]")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Meaning:")," Status I/O pin ",Object(l.b)("strong",{parentName:"li"},"S1(PA","_","01)")," value"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Command Type:")," Read only"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Type:")," Number (0/1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Parameter / Return Value:"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"When operating via TCP connection status pin"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"TCP server / client / mixed mode only ")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return value"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Meaning"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Remarks"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"TCP connection established"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"TCP disconnected"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"*","*"," When operating via DSR(Data Set Ready) pin","*","*",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Signal detect that the peer device communication is ready\n(RS-232, Input)"),Object(l.b)("li",{parentName:"ul"},"Connect with peer device's DTR pin")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Return value"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Meaning"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Remarks"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The peer device is not ready"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The peer device ready for communications"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-")))),Object(l.b)("p",null,"\\</WRAP",">"," \\</WRAP",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Response"))),Object(l.b)("p",null,"\\<WRAP indent",">","\\<WRAP indent",">"," \\<WRAP round box group",">"," \\<WRAP half\ncolumn",">"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Without Parameter (Get)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In ASCII: ",Object(l.b)("inlineCode",{parentName:"li"},"S10\\r\\n"))))),Object(l.b)("p",null,"\\</WRAP",">"," \\<WRAP half column",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"," \\</WRAP",">"),Object(l.b)("hr",null),Object(l.b)("h2",{id:"navigation"},"Navigation"),Object(l.b)("hr",null),Object(l.b)("p",null," ",Object(l.b)("strong",{parentName:"p"},"WIZ750SR")," "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"User's_Manual-%5BEN%5D.md"}),"User's Manual (English)"))," "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"User's_Manual-%5BKO%5D.md"}),"User's Manual (Korean)"))," ")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"Command_Manual-%5BEN%5D.md"}),"Device Command Manual (English)"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"Command_Manual-%5BKO%5D.md"}),"Device Command Manual (Korean)")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"Trouble_Shooting-%5BEN%5D.md"}),"Troubleshooting Guide (English)"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"Trouble_Shooting-%5BKO%5D.md"}),"Troubleshooting Guide (Korean)")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"Series_Update_History-%5BEN%5D.md"}),"Update History (English)"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"Series_Update_History-%5BKO%5D.md"}),"Update History (Korean)")))),Object(l.b)("hr",null),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"WIZ750SR series Downloads")," "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"/document_framework/docs/Product/S2E-Module/WIZ750SR/download"}),"Software Download")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"/document_framework/docs/Product/S2E-Module/WIZ750SR/technical_references"}),"Technical References")))),Object(l.b)("hr",null))}u.isMDXComponent=!0},530:function(e,t,b){"use strict";b.d(t,"a",(function(){return j})),b.d(t,"b",(function(){return p}));var n=b(0),a=b.n(n);function l(e,t,b){return t in e?Object.defineProperty(e,t,{value:b,enumerable:!0,configurable:!0,writable:!0}):e[t]=b,e}function r(e,t){var b=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),b.push.apply(b,n)}return b}function c(e){for(var t=1;t<arguments.length;t++){var b=null!=arguments[t]?arguments[t]:{};t%2?r(Object(b),!0).forEach((function(t){l(e,t,b[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(b)):r(Object(b)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(b,t))}))}return e}function i(e,t){if(null==e)return{};var b,n,a=function(e,t){if(null==e)return{};var b,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)b=l[n],t.indexOf(b)>=0||(a[b]=e[b]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)b=l[n],t.indexOf(b)>=0||Object.prototype.propertyIsEnumerable.call(e,b)&&(a[b]=e[b])}return a}var O=a.a.createContext({}),u=function(e){var t=a.a.useContext(O),b=t;return e&&(b="function"==typeof e?e(t):c({},t,{},e)),b},j=function(e){var t=u(e.components);return a.a.createElement(O.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},o=Object(n.forwardRef)((function(e,t){var b=e.components,n=e.mdxType,l=e.originalType,r=e.parentName,O=i(e,["components","mdxType","originalType","parentName"]),j=u(b),o=n,p=j["".concat(r,".").concat(o)]||j[o]||m[o]||l;return b?a.a.createElement(p,c({ref:t},O,{components:b})):a.a.createElement(p,c({ref:t},O))}));function p(e,t){var b=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=b.length,r=new Array(l);r[0]=o;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,r[1]=c;for(var O=2;O<l;O++)r[O]=b[O];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,b)}o.displayName="MDXCreateElement"}}]);